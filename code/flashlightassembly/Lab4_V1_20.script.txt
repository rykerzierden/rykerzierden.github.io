def Lab4_V12():
  # Default parameters:
  global speed_ms    = 0.050
  global speed_rads  = 3.142
  global accel_mss   = 3.000
  global accel_radss = 1.745
  global blend_radius_m = 0.001
  #########################################################
  #Chuck Initialization
  #########################################################
  # define the pins for the chuck
  global pin_clamp = 0   # clamp valve digital pin
  global pin_unclamp = 2 # unclamp valve digital pin
  global pin_objectSense = 0 # photo sensor digital input pin
  
  # Add any suprograms here
  # Main program:
  # Program generated by RoboDK v5.2.0 for UR5 on 17/03/2022 21:10:34
  speed_ms    = 0.200
  accel_radss = 1.396
  speed_rads  = 3.142
  rq_set_force(255)
  rq_set_speed(255)
  unclamp()
  # set_reference(p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.000000, 0.000000, 0.149600, 0.000000, 0.000000, 0.000000])
  movej([0.000000, -1.570796, 0.000000, -1.570796, 0.000000, 0.000000],accel_radss,speed_rads,0,0)
  movej([0.255865, -1.841322, 1.890192, -1.601863, -1.539904, -2.923252],accel_radss,speed_rads,0,0)
  movej([0.623041, -1.487410, 1.932970, -2.016361, -1.570796, -0.947756],accel_radss,speed_rads,0,0)
  movel(p[-0.328780, -0.370450, 0.062000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_close_and_wait()
  movel(p[-0.328780, -0.370450, 0.170000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.332110, 0.036880, 0.220000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.332110, 0.036880, 0.170000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_open_and_wait()
  clamp()
  rq_open_and_wait()
  movel(p[-0.332110, 0.036880, 0.400000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movej([0.093912, -1.844953, 2.241928, -1.967789, -1.570796, -1.476884],accel_radss,speed_rads,0,blend_radius_m)
  movel(p[-0.328780, -0.140450, 0.065000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_close_and_wait()
  movel(p[-0.328780, -0.140450, 0.253400, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.332110, 0.036880, 0.253400, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.332110, 0.036880, 0.203400, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_open_and_wait()
  rq_close_and_wait()
  movel(p[-0.332110, 0.036880, 0.202400, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0.001)
  accel_radss = 6.283
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.975975, 2.092912, -1.687744, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  accel_radss = 1.745
  tighten_torque(3, 0, 1.57, 2,2,1,100,100,50)
  movel(p[-0.332110, 0.036880, 0.400000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0)
  movej([0.299116, -1.781440, 2.098392, -1.887731, -1.570796, -1.271680],accel_radss,speed_rads,0,blend_radius_m)
  movel(p[-0.328780, -0.215450, 0.075900, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_close_and_wait()
  movel(p[-0.328780, -0.215450, 0.330000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.331110, 0.035880, 0.355000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.331110, 0.035880, 0.255000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_open_and_wait()
  movel(p[-0.332110, 0.036880, 0.400000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movej([0.472487, -1.627656, 2.065300, -2.008438, -1.570796, -1.098310],accel_radss,speed_rads,0,blend_radius_m)
  movel(p[-0.328780, -0.290450, 0.065600, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_set_force(100)
  rq_close_and_wait()
  movel(p[-0.328780, -0.290450, 0.352000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.332110, 0.036880, 0.312000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  movel(p[-0.332110, 0.036880, 0.252000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_set_force(255)
  accel_radss = 6.283
  movej([-0.442876, -1.982764, 1.970128, -1.558164, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.982764, 1.970128, -1.558164, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  movej([-0.442876, -1.982764, 1.970128, -1.558164, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.982764, 1.970128, -1.558164, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  movej([-0.442876, -1.982764, 1.970128, -1.558164, -1.570796, 4.252058],accel_radss,speed_rads,0,0)
  rq_open_and_wait()
  movej([-0.442876, -1.982764, 1.970128, -1.558164, -1.570796, -2.013674],accel_radss,speed_rads,0,0)
  rq_close_and_wait()
  accel_radss = 1.745
  tighten_torque(3,0,1.57,2,2,1,100,100,50)
  rq_open_and_wait()
  rq_close_and_wait()
  unclamp()
  movel(p[-0.332110, 0.036880, 0.302000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,0)
  movej([0.623041, -1.562595, 1.743448, -1.751647, -1.570796, -0.947756],accel_radss,speed_rads,0,blend_radius_m)
  speed_ms    = 0.050
  movel(p[-0.325780, -0.370450, 0.150000, 0.000000, 3.141593, 0.000000],accel_mss,speed_ms,0,blend_radius_m)
  rq_open_and_wait()
  movej([0.255865, -1.841322, 1.890192, -1.601863, -1.539904, -2.923252],accel_radss,speed_rads,0,0)
  movej([0.000000, -1.570796, 0.000000, -1.570796, 0.000000, 0.000000],accel_radss,speed_rads,0,0)
  # End of main program
end
#####################################################################
#closes clamp
def clamp():
	if get_standard_digital_in(pin_objectSense):
		#clamp pneumatic clamp
		set_standard_digital_out(pin_clamp, True)
		set_standard_digital_out(pin_unclamp, False)
	
		#add a delay in seconds
		sleep(1.0)
	
		# Turn the pin off
		set_standard_digital_out(pin_clamp, False)
	else:
		sleep(1.0)
	end
end

#####################################################################
#opens clamp
def unclamp():
	#unclamp pneumatic clamp
	set_standard_digital_out(pin_clamp, False)
	set_standard_digital_out(pin_unclamp, True)
	
	#add a delay in seconds
	sleep(1.0)
	
	# Turn the pin off
	set_standard_digital_out(pin_unclamp, False)

end

#####################################################################
#twist with torque check
def tighten_torque(torqueLimit, writst3_StartAngle, wrist3_EndAngle, jointAccel, jointSpeed, num_checkTorque, gripperForce, gripperSpeed, gripperOpen): #In this function, torque limit = max torque to stop turning at, wrist3_StartAngle is angle to start spinning at, wrist3_EndAngle is angle to stop turning at, gripperForce and gripperSpeed are Force and Speed settings of gripper, gripperOpen is how much to open the gripper 
	#Get the current joint angle positions
	joint_pos = get_actual_joint_positions()
	#Set jointAngle[5] (wrist3) to startAngle 
	joint_pos[5] = writst3_StartAngle

	global joint_inc = norm(wrist3_EndAngle - writst3_StartAngle) / num_checkTorque 
	global q = 0
	global joint_torques = get_joint_torques()
	
	#Gripper Settings
    	rq_set_speed_norm(gripperForce) #0 - 100
    	rq_set_force_norm(gripperSpeed) #0 - 100
	
	#screw based on torque
	joint_torques[5] = 0
	while norm(joint_torques[5]) < torqueLimit:
		#Move to beginning turn position
		joint_pos[5] = writst3_StartAngle
		movel(joint_pos, jointAccel, jointSpeed)
		#Close the gripper
		rq_move_and_wait_norm(100)
		q = 0
		while q < num_checkTorque:
			#Move to end of twist
			joint_pos[5] = joint_pos[5] + joint_inc
			movel(joint_pos, jointAccel, jointSpeed)
			#get joint torques
			joint_torques = get_joint_torques()
			if norm(joint_torques[5]) > torqueLimit:
				break
			end
			q = q+1
		end
		#open gripper
		rq_move_and_wait_norm(gripperOpen)
	end
end


Lab4_V12()